<template>
  <view class="popup_view">
    <syc-panpopup
      ref="sycPanpopup"
      :width="`${option.width}%`"
      :height="`${option.height}%`"
      threshold="50%"
      :show="showPopup"
      @close="close"
      opacity="0.7"
      easing="easeOutExpo"
      :fullPan="option.fullPan"
      :mode="selectedPosition"
      :borderRadius="option.borderRadius ? '10px' : ''"
      :isScreenHeight="true"
      :threshold="`${option.threshold}%`"
    >
      <view class="popup_content" :style="popupContentStyle">
        <view
          class="touch_box"
          @touchstart="touchHeadbar"
          :style="{ padding: touchViewStyle.padding }"
        >
          <view
            class="touch_bar"
            :style="{
              width: touchViewStyle.width,
              height: touchViewStyle.height,
            }"
          >
          </view>
        </view>
        <scroll-view :scroll-y="true" class="content_box">
          <text class="text">{{ option.contentText }}</text>
          <view :style="{ height: safeAreaHeight + 'px' }"></view>
        </scroll-view>
      </view>
    </syc-panpopup>
  </view>
</template>
<script>
export default {
  data() {
    return {
      // 显示弹框
      showPopup: false,
      // 配置
      option: {},
    };
  },
  onLoad() {
    uni.$on("popup-option-subnvue", (val) => {
      this.option = val;
      this.showPopup = true;
      console.log(val);
    });
  },
  onUnload() {
    uni.$off("popup-option-subnvue");
  },
  methods: {
    close() {
      this.showPopup = false;
      const subNVue = uni.getSubNVueById("index-subnvuePopup");
      subNVue.hide("fade-out", 300);
    },
    // 触摸顶栏
    touchHeadbar() {
      this.$refs.sycPanpopup.onTouchStart();
    },
  },
  computed: {
    safeAreaHeight() {
      return uni.getSystemInfoSync().safeAreaInsets.bottom;
    },
    // 已选择的弹框位置
    selectedPosition() {
      try {
        return this.option.position.list[this.option.position.selected];
      } catch (error) {
        return "";
      }
    },
    // 滑动选择器禁用状态
    sliderDisabled() {
      return {
        w: ["top", "bottom"].includes(this.selectedPosition),
        h: ["left", "right"].includes(this.selectedPosition),
      };
    },
    // 弹框容器样式
    popupContentStyle() {
      const styles = {};
      switch (this.selectedPosition) {
        case "top":
          styles.flexDirection = "column-reverse";
          break;
        case "bottom":
          styles.flexDirection = "column";
          break;
        case "left":
          styles.flexDirection = "row-reverse";
          break;
        case "right":
          styles.flexDirection = "row";
          break;
        default:
          break;
      }
      return styles;
    },
    // 触摸滑动区域样式
    touchViewStyle() {
      const styles = {};
      switch (this.selectedPosition) {
        case "top":
          styles.width = "80rpx";
          styles.height = "6px";
          styles.padding = "20px 0px 15px 0px";
          break;
        case "bottom":
          styles.width = "80rpx";
          styles.height = "6px";
          styles.padding = "15px 0px 20px 0px";
          break;
        case "left":
          styles.width = "12rpx";
          styles.height = "40px";
          styles.padding = "0px 30rpx 0px 40rpx";
          break;
        case "right":
          styles.width = "12rpx";
          styles.height = "40px";
          styles.padding = "0px 40rpx 0px 30rpx";
          break;
        default:
          break;
      }
      return styles;
    },
  },
};
</script>
<style lang="scss" scoped>
.popup_view {
  flex: 1;
}
.popup_content {
  display: flex;
  flex: 1;
  .touch_box {
    display: flex;
    align-items: center;
    justify-content: center;
    .touch_bar {
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #939393;
    }
  }
  .content_box {
    flex: 1;
    .text {
      padding: 15px 30rpx;
      font-size: 16px;
      line-height: 32px;
    }
  }
}
</style>
