<template>
  <scroll-view scroll-y class="page_content">
    <view class="option_box">
      <text class="option_title">弹出方向</text>
      <view class="option_list">
        <text
          :class="{
            option_item: true,
            selected_item: position.selected === index,
          }"
          v-for="(item, index) of position.list"
          :key="index"
          @click="position.selected = index"
        >
          {{ item }}
        </text>
      </view>
    </view>

    <view class="option_box">
      <view class="option_slider">
        <text class="slider_text">Width</text>
        <u-slider
          :class="{ slider: true, slider_disabled: sliderDisabled.w }"
          v-model="option.width"
          blockColor="#3677f8"
          :disabled="sliderDisabled.w"
        />
        <text class="slider_value">{{ option.width }}%</text>
      </view>
    </view>

    <view class="option_box">
      <view class="option_slider">
        <text class="slider_text">Height</text>
        <u-slider
          :class="{ slider: true, slider_disabled: sliderDisabled.h }"
          v-model="option.height"
          blockColor="#3677f8"
          :disabled="sliderDisabled.h"
        />
        <text class="slider_value">{{ option.height }}%</text>
      </view>
    </view>

    <view class="option_box">
      <view class="option_slider">
        <text class="slider_text">关闭阈值</text>
        <u-slider
          class="slider"
          v-model="option.threshold"
          blockColor="#3677f8"
        />
        <text class="slider_value">{{ option.threshold }}%</text>
      </view>
    </view>

    <view class="option_box">
      <text class="option_title">圆角</text>
      <u-switch v-model="option.borderRadius" />
    </view>

    <view class="option_box">
      <text class="option_title">全局弹框手势</text>
      <u-switch v-model="option.fullPan" />
    </view>

    <view class="option_box">
      <text class="option_title">弹框类型</text>
      <view class="option_list">
        <text
          :class="{
            option_item: true,
            selected_item: popupType.selected === index,
          }"
          v-for="(item, index) of popupType.list"
          :key="index"
          @click="popupType.selected = index"
        >
          {{ item.name }}
        </text>
      </view>
      <text class="option_tip">
        {{ popupType.list[popupType.selected].tip }}
      </text>
    </view>

    <text
      class="open_button"
      @click="open"
      :style="{ paddingBottom: safeAreaHeight + 'px' }"
    >
      打开弹框
    </text>
    <syc-panpopup
      ref="sycPanpopup"
      :width="`${option.width}%`"
      :height="`${option.height}%`"
      threshold="50%"
      :show="showPopup"
      @close="close"
      opacity="0.7"
      easing="easeOutExpo"
      :fullPan="option.fullPan"
      :mode="selectedPosition"
      :borderRadius="option.borderRadius ? '10px' : ''"
      :isScreenHeight="popupType.selected !== 0"
      :threshold="`${option.threshold}%`"
    >
      <view class="popup_content" :style="popupContentStyle">
        <view
          class="touch_box"
          @touchstart="touchHeadbar"
          :style="{ padding: touchViewStyle.padding }"
        >
          <view
            class="touch_bar"
            :style="{
              width: touchViewStyle.width,
              height: touchViewStyle.height,
            }"
          >
          </view>
        </view>
        <list class="content_box" :bounce="false">
          <cell>
            <text class="text">{{ contentText }}</text>
            <view :style="{ height: safeAreaHeight + 'px' }"></view>
          </cell>
        </list>
      </view>
    </syc-panpopup>
  </scroll-view>
</template>

<script>
export default {
  data() {
    return {
      position: {
        selected: 1,
        list: ["top", "bottom", "left", "right"],
      },
      option: {
        // 宽度(position为top、bottom时始终为100%)
        width: 70,
        // 高度(position为left、right时始终为100%)
        height: 70,
        // 滑动关闭阈值
        threshold: 50,
        // 开启全局弹框手势
        fullPan: false,
        // 设置圆角
        borderRadius: true,
      },
      popupType: {
        selected: 0,
        list: [
          { name: "普通弹框", tip: "无法遮挡顶部导航和状态栏" },
          { name: "SubNvue弹框", tip: "全屏遮挡" },
          {
            name: "页面弹框",
            tip: "全屏遮挡;因演示通过uni.$emit传递配置需要延迟打开 实际使用可直接在页面中定义好配置不需要延迟",
          },
        ],
      },
      // 显示弹框
      showPopup: false,
      // 内容
      contentText:
        "Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti eius impedit laudantium saepe natus, blanditiis quo. Nemo, ducimus, modi asperiores numquam incidunt temporibus possimus cum perferendis doloribus quisquam vel suscipit! Voluptate mollitia facilis expedita id, temporibus culpa a ad consequuntur? Nulla dolorum, possimus sunt est distinctio omnis voluptate cupiditate explicabo repudiandae rem laudantium sint sequi, molestiae iure obcaecati iusto aperiam velit nostrum blanditiis mollitia eum quas dolorem perspiciatis enim. Commodi suscipit quae vero blanditiis voluptatibus aperiam similique veritatis non? Eveniet sint tenetur aliquid nemo atque rem rerum magnam illum? Quae neque assumenda deleniti possimus magnam, porro fugit aspernatur commodi esse.",
    };
  },
  methods: {
    open() {
      const emitData = {
        position: this.position,
        contentText: this.contentText,
        ...this.option,
      };
      switch (this.popupType.selected) {
        case 0:
          this.showPopup = true;
          break;
        case 1:
          const subNVue = uni.getSubNVueById("index-subnvuePopup");
          subNVue.show("fade-in", 300, () => {
            uni.$emit("popup-option-subnvue", emitData);
          });
          break;
        case 2:
          uni.navigateTo({
            url: "/pages/index/pagePopup",
            animationType: "fade-in",
            animationDuration: 300,
            success: () => uni.$emit("popup-option-page", emitData),
          });
          break;
        default:
          break;
      }
    },
    close() {
      this.showPopup = false;
    },
    // 触摸顶栏
    touchHeadbar() {
      this.$refs.sycPanpopup.onTouchStart();
    },
  },
  watch: {
    selectedPosition: {
      handler(val) {
        if (["left", "right"].includes(val)) {
          this.option.borderRadius = false;
        }
      },
    },
  },
  computed: {
    safeAreaHeight() {
      return uni.getSystemInfoSync().safeAreaInsets.bottom;
    },
    // 已选择的弹框位置
    selectedPosition() {
      return this.position.list[this.position.selected];
    },
    // 滑动选择器禁用状态
    sliderDisabled() {
      return {
        w: ["top", "bottom"].includes(this.selectedPosition),
        h: ["left", "right"].includes(this.selectedPosition),
      };
    },
    // 弹框容器样式
    popupContentStyle() {
      const styles = {};
      switch (this.selectedPosition) {
        case "top":
          styles.flexDirection = "column-reverse";
          break;
        case "bottom":
          styles.flexDirection = "column";
          break;
        case "left":
          styles.flexDirection = "row-reverse";
          break;
        case "right":
          styles.flexDirection = "row";
          break;
        default:
          break;
      }
      return styles;
    },
    // 触摸滑动区域样式
    touchViewStyle() {
      const styles = {};
      switch (this.selectedPosition) {
        case "top":
          styles.width = "80rpx";
          styles.height = "6px";
          styles.padding = "20px 0px 15px 0px";
          break;
        case "bottom":
          styles.width = "80rpx";
          styles.height = "6px";
          styles.padding = "15px 0px 20px 0px";
          break;
        case "left":
          styles.width = "12rpx";
          styles.height = "40px";
          styles.padding = "0px 30rpx 0px 40rpx";
          break;
        case "right":
          styles.width = "12rpx";
          styles.height = "40px";
          styles.padding = "0px 40rpx 0px 30rpx";
          break;
        default:
          break;
      }
      return styles;
    },
  },
};
</script>

<style lang="scss" scoped>
.page_content {
  flex: 1;
  .option_box {
    padding: 15px 40rpx;
    .option_title {
      color: #000000;
      font-size: 14px;
      margin-bottom: 10px;
    }
    .option_list {
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-direction: row;
      flex-wrap: wrap;
      .option_item {
        min-width: 140rpx;
        line-height: 35px;
        border-radius: 4px;
        text-align: center;
        border: 1px solid #dddddd;
        margin-bottom: 10px;
        background-color: #ffffff;
        color: #000000;
        font-size: 14px;
        padding: 0px 8rpx;
      }
      .selected_item {
        border: 1px solid #0267ff;
        background-color: #0267ff;
        color: #ffffff;
      }
    }
    .option_slider {
      display: flex;
      flex-direction: row;
      .slider_text,
      .slider_value {
        min-width: 100rpx;
        font-size: 14px;
      }
      .slider_value {
        text-align: right;
      }
      .slider {
        flex: 1;
      }
      .slider_disabled {
        opacity: 0.3;
      }
    }
    .option_tip {
      color: #6e6e6e;
      font-size: 14px;
    }
  }
}

.open_button {
  font-size: 16px;
  color: #ffffff;
  background-color: rgb(37, 144, 244);
  text-align: center;
  line-height: 50px;
  position: fixed;
  left: 0px;
  right: 0px;
  bottom: 0px;
}

.popup_content {
  display: flex;
  flex: 1;
  .touch_box {
    display: flex;
    align-items: center;
    justify-content: center;
    .touch_bar {
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #939393;
    }
  }
  .content_box {
    flex: 1;
    .text {
      padding: 15px 30rpx;
      font-size: 16px;
      line-height: 32px;
    }
  }
}

.test_view {
  width: 100rpx;
  height: 100rpx;
  margin-left: 100rpx;
  background-color: blueviolet;
  display: flex;
  align-items: center;
  justify-content: center;
  .text {
    color: #ffffff;
    font-size: 14px;
  }
}
</style>
